#!/bin/bash

# Define some useful variables for printing
bold=`tput bold`
normal=`tput sgr0`
log="/home/$USER/.batchgitrc"
totalNum=$(wc -l < $log)

#Progress bar stuff
bar() {
        str=$1
        num=$2
        v=$(printf "%-${num}s" "$str")
        echo "${v// /$str}"
}

modeEcho () {
        if [[ $gpush ]] || [[ $gpull ]] || [[ $gpullpush ]]; then
                tput cup 0 0
        fi
        titleLen=${#MODE}
        titleSpaces=$(bar "=" $titleLen)
        echo -e "\n${bold}$MODE\n$titleSpaces${normal}\n"
}

pwdEcho () {
        REPO=${PWD##*/}
        #returns the branch
        BRANCH=$(git rev-parse --abbrev-ref HEAD)
        #prints the repository name and branch to stdout
        tput cup 3 0
        echo -e "${bold}Repository: $REPO ${normal} $BRANCH"
}

termSize () {
        terminalSize=$(stty size | sed 's|.* ||g')
        centre=$(echo $(stty size | sed 's|.* ||g') / 2 | bc)
        offsetby=$(echo $totalNum / 2 | bc)
        offset=$(($centre - $offsetby)) 
        if [[ "$lastSize" != "$terminalSize" ]]; then
                tput clear
        fi
        lastSize=$terminalSize
}

progressLoop () {
        termSize
        modeEcho
        spaces=$(($totalNum-$progNum))
        bargraphDone=$(bar "=" $progNum)
        if [[ $j != $totalNum ]]; then
                bargraphSpaces=$(bar " " $spaces)
                tput cup 5 $offset
                echo "[$bargraphDone$bargraphSpaces] $progNum/$totalNum"
        else
                tput cup 5 $offset
                echo "[$bargraphDone] Done!"
        fi
}

#function that assigns n number of command line arguements
assignDynamicDir () {
        numCurArg=1
        while [ $numCurArg -lt $# ]; do
                numCurArg=$((numCurArg+1))
                Dir[$numCurArg]=${!numCurArg}
        done
}

#function that goes through your list of repos in $log and asks which to remove from disk
wipeRepos () {
                REPO=${PWD##*/}
                echo "${bold}Repository: $REPO ${normal}"
                echo "Repo path: $(pwd)"
                echo "Remove repository? (Y/N): "
                read delornay </dev/tty
                case $delornay in 
                        [Yy][eE][sS]|[yY])
                                #if yes to delete then moves up one and recursively deletes
                                echo "$PWD"
                                cd ..
                                #could have sudo here to save y for write protected file
                                #but don't want to force sudo
                                rm -rf $REPO
                                echo "Wiped";;
                        [Nn][Oo]|[Nn]) echo "Not wiped" ;;
                        [Qq][Uu][Ii][Tt]|[Qq]|[Ee][Xx][Ii][Tt]|[Qq]|[Ee]) echo "quiting" && exit ;;
                        *) echo "That choice was unclear so untouched";;
                esac
                printf "\n"
}

gitReset () {
                REPO=${PWD##*/}
                echo "${bold}Repository: $REPO ${normal}"
                echo "Repo path: $(pwd)"
                echo "Reset repository? (Y/N): "
                read resetornay </dev/tty
                case $resetornay in 
                        [Yy][eE][sS]|[yY])
                                #if yes to delete then moves up one and recursively deletes
                                echo "$PWD"
                                #could have sudo here to save y for write protected file
                                #but don't want to force sudo
                                git reset --hard HEAD
                                echo "Reset!";;
                        [Nn][Oo]|[Nn]) echo "Not reset" ;;
                        [Qq][Uu][Ii][Tt]|[Qq]|[Ee][Xx][Ii][Tt]|[Qq]|[Ee]) echo "quiting" && exit ;;
                        *) echo "That choice was unclear so untouched";;
                esac
                printf "\n"
}

#function that checks that the $log exists or if its empty and 
#runs find git
checkbatchgit () {
        #checks that batchgitrc exists, if not then goes
        #to function to search for current repos
	if [[ $clone == "false" ]]; then
		#if [[ ! -f $log ]]; then
			findgitrepos
		#fi
	fi
        #if file does exist, then check how many lines are in it
        numberInbatchgitrc=$(wc -l < $log)
        #if zero lines (i.e. empty) then searches for repos as above
        if [[ $numberInbatchgitrc == "0" ]]; then
                findgitrepos
        fi
        #if has lines, set paths array to them
        if [[ -f $log ]]; then
                paths=( $(cat $log) )     
        fi
}

#function that finds git repos on the disk
findgitrepos () {
        echo "Looking for repos, please wait"
        #Runs a find to look for repos
        if [[ $searchdir ]]; then
                location=$searchdir
        else
                location=/home/$USER
        fi
        findgit=( $(find $location -type d -name .git | xargs -n 1 dirname) )
        #counts how many are inside
        numfind=${#findgit[@]}
        #tells user how many repos they have
        echo -e "There are $numfind git repositories \n"
        #if file doesn't exist, then makes one
        if [[ ! -f $log ]]; then
                touch $log
                echo -e "making a $log file \n"
        #if it does exist then it makes a backup
        else
                mv $log $log.bak
                touch $log
                echo -e "making a new $log file and backing up old to $log.bak \n"
        fi
        #runs through all the repos it has found
        for gdir in "${findgit[@]}"; do
                        echo -e "$gdir"
                        echo "Include this repository? (Y/N): "
                        read incRepo </dev/tty
                        case $incRepo in 
                                #Can keep track of repo, and if so writes it to file
                                [Yy][eE][sS]|[yY]) echo $gdir >> $log;;
                                #no action if not kept
                                [Nn][Oo]|[Nn]) : ;;
                                #option to quit
                                [Qq][Uu][Ii][Tt]|[Qq]|[Ee][Xx][Ii][Tt]|[Qq]|[Ee]) exit ;;
                                #if there is nonsense, then just return to begin
                                # *) findgitrepos ;;
                        esac
                echo -e "\n"
        done
        exit
}

#function that asks which repos to bootstrap
bootstrapchoice () {
        #For bootstrap mode, asks which should be written to boostrap file
        echo "Would you like to add this repository to the bootstrap (Y/N)?: "
        read addornay </dev/tty
        #again, I can makes these inline choices to save lines/time
        case $addornay in 
                [Yy][eE][sS]|[yY])
                        #echo the remote address to one file
                        echo $remotesClean >> ~/batchgit-takeaway/bootstraprepo relativeFilepath=$(dirname $locdir)
                        relativeFilepath2=$(echo $relativeFilepath | sed -e 's|^/[^/]*||' -e 's|^/[^/]*||' -e 's|^/||')
                        #echo the filepath that the repo lives in (i.e. the full parent file path)
                        #and change the user name to $USER for compatibility.
                        echo "$relativeFilepath2" >> ~/batchgit-takeaway/bootstrapdir
                        echo "Added";;
                [Nn][Oo]|[Nn]) echo "Not added" ;;
                [Qq][Uu][Ii][Tt]|[Qq]|[Ee][Xx][Ii][Tt]|[Qq]|[Ee]) echo "quiting" && exit ;;
                *) echo "That choice was unclear" && bootstrapchoice ;;
        esac
}

#function that ensures the number of repos to bootstrap
#matches the number of directories that are present
checkrepodirmatch () {
        #before running the bootstrap
        #get the list of remotes
        clones=( $(cat ~/batchgit-takeaway/bootstraprepo) )
        #get the parent file paths
        localRepo=( $(cat ~/batchgit-takeaway/bootstrapdir) )
        #count the numbers of each
        lenclones=$(wc -l < ~/batchgit-takeaway/bootstraprepo)
        lenlocalRepo=$(wc -l < ~/batchgit-takeaway/bootstrapdir)
        #ensure backup ran correctly and there is an equal number of both
        if [[ $lenlocalRepo != $lenclones ]]; then
                echo "The number of directories does not match the number of remote locations"
                exit
        fi
}

#function that asks whether repo should be cloned or not
confirmClone () {
        #ask whether to clone or not
        echo "Would you like to clone this repository to this location? (Y/N): "
        read cloneornay </dev/tty
        case $cloneornay in 
                [Yy][eE][sS]|[yY]) git clone ${clones[$i]} && echo "cloned" ;;
                [Nn][Oo]|[Nn]) echo "Not cloned" ;;
                [Qq][Uu][Ii][Tt]|[Qq]|[Ee][Xx][Ii][Tt]|[Qq]|[Ee]) echo "quiting" && exit ;;
                *) echo "That choice was unclear" && confirmClone ;;
        esac
}

#function that checks the git status output for different types of
#modifications and then echoes them
gitStatus () {
        #looks for types of modifications that can popup in git status
        # git status > .batchgitstatusmessage
        untracked=$(git status | sed -n -e '/Untracked/,$p' | tail -n +4 | sed '/^$/,$d' | sed 's/^[ \t]*//g')
        modified=$(git ls-files -m)
        deleted=$(git status | sed -n -e '/deleted:/,$p' | grep "deleted" | sed -e 's/.*deleted://g' -e 's/^[ \t]*//g')
        commit=$(git status | grep -w "commit" | sed -e 's/.*by //g' -e 's/\.//g' -e 's/#//g' | head -n 1)
        committed=$(git status | sed -n -e '/committed:/,$p' | grep "modified:" | sed -e 's/.*modified://g' -e 's/^[ \t]*//g')
        newfiles=$(git status | sed -n -e '/committed:/,$p' | grep "new file" | sed -e 's/.*new file://g' -e 's/^[ \t]*//g')
        #status of commit
        commitStatus=$(git status | sed -n -e '/commit/,$p' | grep -w "commit" | sed -e 's/.* is //g' -e 's/ of.*//g')
        commitAhead=$(git status | grep "ahead" | sed -e 's/.*by //g' -e 's/ commit.//g' -e 's/\.//g')
        commitBehind=$(git status | grep "behind" | sed -e 's/.*by //g' -e 's/ commit.//g')
        commitDiverge=$(git status | grep "diverged"*)
        if [[ ! -z $committed ]] || [[ ! -z $newfiles ]] || [[ ! -z $deleted ]] || [[ ! -z $untracked ]] || [[ ! -z $modified ]] || [[ ! -z $commitAhead ]] || [[ ! -z $commitBehind ]] || [[ ! -z $commitDiverge ]]; then
                #gives the repo name
                REPO=${PWD##*/}
                #returns the branch
                BRANCH=$(git rev-parse --abbrev-ref HEAD)
                #prints the repository name and branch to stdout
                echo -e "${bold}Repository: $REPO ${normal} $BRANCH"
                #if there are commited files echoes that
                if [[ ! -z $committed ]]; then
                        echo -e "Commited: \n\e[1;31m$committed\e[0m"
                fi
                #if there are new files, echoes that
                if [[ ! -z $newfiles ]]; then
                        echo -e "New: \n\e[1;32m$newfiles\e[0m"
                fi
                #if there are deleted files, echoes that
                if [[ ! -z $deleted ]]; then
                        echo -e "Deleted: \n\e[1;31m$deleted\e[0m"
                fi
                #if there are untracked files, echoes that
                if [[ ! -z $untracked ]]; then
                        echo -e "Untracked: \n\e[1;31m$untracked\e[0m"
                fi
                #if there are modified files, echoes that
                if [[ ! -z $modified ]]; then
                        echo -e "Modified: \n\e[1;31m$modified\e[0m"
                fi
                #checks status of commit, in front, ahead or diverged. Never seen diverged
                #happen though so I can't guarantee it works
                if [[ ! -z $commitAhead ]] || [[ ! -z $commitBehind ]]; then
                        if [[ ! -z $commitAhead ]]; then
                                echo -e "Commit: \n\e[1;31m$commitAhead ahead\e[0m"
                        fi
                        if [[ ! -z $commitBehind ]]; then
                                echo -e "Commit: \n\e[1;31m$commitBehind, behind\e[0m"
                        fi
                #look for divergence
                elif [[ ! -z $commitDiverge ]]; then
                        echo "Divergence has occured"
                #not sure when this one might pop up
                elif [[ ! -z $commitAhead ]] && [[ ! -z $commitBehind ]]; then
                        echo "You are ahead and behind"
                fi
                echo ""
        fi
        # rm .batchgitstatusmessage
}

#function that pulls repos
gitPull () {
        pwdEcho
        git pull > .batchgitpullmessage 2>&1
        pulluptodate=$(grep "up-to-date" .batchgitpullmessage)
        if [[ -z $pulluptodate ]]; then
                tput cup 10 0
                cat .batchgitpullmessage
                printf "\n"
                tput clear
        fi
        tput cup 3 0
        echo -e "                                                                  "
        rm .batchgitpullmessage
}

#function that pushes repos
gitPush () {
        git push --porcelain > .batchgitpushmessage 2>&1
        pushuptodate=$(grep "up to date" .batchgitpushmessage)
        if [[ $gpullpush ]]; then
                gitPull
        fi
        if [[ -z $pushuptodate ]]; then
                REPO=${PWD##*/}
                BRANCH=$(git rev-parse --abbrev-ref HEAD)
                echo "${bold}Repository: $REPO ${normal} $BRANCH ${bold} pushing ${normal}"
                cat .batchgitpushmessage
                printf "\n"
                tput clear
        fi
        tput cup 3 0
        echo -e "                                                                  "
        rm .batchgitpushmessage
}

#function that checks for different types of commits
gitCommit () {
        numMod=$(git status | grep -c "modified")
        numNew=$(git status | grep -c "new file")
        numUntr=$(git status | grep -c "untracked")
        numDel=$(git status | grep -c "deleted")
        numTotal=$(($numNew + $numMod + $numUntr + $numDel))
        if [[ $numTotal != "0" ]]; then
                REPO=${PWD##*/}
                BRANCH=$(git rev-parse --abbrev-ref HEAD)
                echo "${bold}Repository: $REPO ${normal} $BRANCH"
                echo "adding"
                git add .
                git add -A
                echo "commit message $commitMessage "
                git commit -m "$commitMessage"
        fi
}

batchgitHelp () {
        echo -e """${bold}Core git features:${normal}
-s \t git status all directories
-c \t add a commit message for all requiring files
-d \t git pull all directories
-p \t git push all directories
-u \t git pull and then push all repositories
-z \t git reset --head HARD specific repositories

${bold}Managing batchgitrc:${normal}
-o \t use an alternative rc file for batchgit
-f \t find git repos on disk and write to batchgitrc
-a \t add a directory to batchgitrc
-l \t recursively add repos from a path to batchgitrc
-r \t remove specific directories from batchgitrc

${bold}Bootstrap and restoring on a new machine:${normal}
-b \t make a batchgit backup
-n \t clone repos on a new disk using batchgit backup

${bold}Other features:${normal}
-w \t remove specific directories from disk
-i \t start the indicator applet 
-h \t display this help file
        """
}

gitAdd () {
        if [[ ! -z $addDir ]]; then 
                #checks rc exists, think this is / should be a function
                if [[ ! -f $log ]]; then
                        touch $log
                        echo -e "making $log file \n"
                fi
                #think that is isnt actually necessary, anyways, adds current dir if ./ used
                if [[ $addDir == "./" ]]; then
                        echo $(pwd) >> $log
                        echo -e "adding $(pwd) to $log\n"
                elif [[ $addDir =~ "home" ]]; then
                        echo -e "adding $addDir to $log\n"
                        echo $addDir >> $log
                else
                        if [[ $addDir != "*/*" ]]; then
                                PWD=$(pwd)
                                #adds based on pwd plus arguement
                                pwdrepdir=$PWD"/"$addDir
                                echo -e "adding $pwdrepdir to $log\n"
                                echo $pwdrepdir >> $log
                        else
                                echo $addDir >> $log
                                echo -e "Added $addDir to the $log file"
                        fi
                fi
                        #removes any duplicates
                        sort -u -o $log $log
        else
                #error if dir not added
                echo "you need to add the directory after the flag!"
        fi
        logLocation
        checkbatchgit
}

gitOptions () {
        echo -e """
${bold}Core git features:${normal}
1) \t git status all directories
2) \t add a commit message for all requiring files
3) \t git pull all directories
4) \t git push all directories
5) \t git pull and then push all repositories
6) \t git reset --head HARD specific repositories

${bold}Managing batchgitrc:${normal}
7) \t use an alternative rc file for batchgit
8) \t find git repos on disk and write to batchgitrc
9) \t add a directory to batchgitrc
10)\t recursively add repos from a path to batchgitrc
11)\t remove specific directories from batchgitrc

${bold}Bootstrap and restoring on a new machine:${normal}
12)\t make a batchgit backup
13)\t clone repos on a new disk using batchgit backup

${bold}Other features:${normal}
14)\t remove specific directories from disk
15) \t start the indicator applet 
16)\t display this help file

quit or exit to stop
"""
        echo "What happens now?"
        read whatnow </dev/tty
        case $whatnow in
                [1]) gstatus=true;;
                [2]) gcommit=true;;
                [3]) gpull=true;;
                [4]) gpush=true;;
                [5]) gpullpush=true;;
                [6]) greset=true;;
                [7]) other=true;ask=true;;
                [8]) gfind=true;;
                [9]) add=true;ask=true;;
                [10]) gaddrec=true;ask=true;;
                [11]) grm=true;ask=true;;
                [12]) backup=true;;
                [13]) clone=true;;
                [14]) wipe=true;ask=true;;
                [15]) indicator=true;;
                [16]) batchgitHelp;;
                [Qq][Uu][Ii][Tt]|[Qq]|[Ee][Xx][Ii][Tt]|[Qq]|[Ee]) echo -e "quiting\n"; exit;;
                * ) echo "that was nonsense"; gitOptions;;
        esac
        echo ""

}

askLoop () {
        if [[ $other ]]; then
                echo -n "Enter pathname for alternative batchgitrc: "
                read input
                eval olog=$input
                if [[ -f "$olog" ]]; then
                        echo "using $olog"
                else
                        echo "$olog does not exist"
                fi
                other="other"
                logLocation
                checkbatchgit
                ask=false
        elif [[ $add ]]; then
                echo -n "Enter pathname for repo to add to batchgitrc: " 
                read input
                eval oaddDir=$input
                if [[ -d "$oaddDir" ]]; then
                        echo "adding $oaddDir"
                        oadd=true
                else
                        echo "$oaddDir does not exist"
                fi
                ask=false
                other="other"
                add=other
        elif [[ $gaddrec ]]; then
                echo -n "Enter top directory for recursive search: " 
                read gaddrecDir
                gaddrec=false
                ask=false
        elif [[ $grm ]]; then
                grm=false
                echo -n "Enter pathname for repo to remove from batchgitrc: " 
                read rmDir
                ask=false
        fi
        gitOptions
}

logLocation () {
        if [[ $other == "true" ]]; then
                log=$altLog
        elif [[ $other == "other" ]]; then
                log=$olog
        else
                log=~/.batchgitrc
        fi
}

while getopts sfndupbwzh?ia:r:c:l:o:g: OPTION
do
        case $OPTION in
                s)
                        gstatus=true
                        ;;
                f)
                        gfind=true
                        ;;
                g)
                        gfind=true
                        searchdir="$OPTARG"
                        ;;
                h)
                        batchgitHelp
                        ;;
                d)
                        gpull=true
                        ;;
                u)
                        gpullpush=true
                        ;;
                p)
                        gpush=true
                        ;;
                z)
                        greset=true
                        ;;
                b)
                        backup=true
                        ;;
                n)
                        clone=true
                        ;;
                a)
                        add=true
                        addDir=$OPTARG
                        ;;
                r)
                        grm=true
                        rmDir=$OPTARG
                        ;;
                c)
                        gcommit=true
                        commitMessage="$OPTARG"
                        ;;
                l)
                        gaddrec=true
                        addrecDir="$OPTARG"
                        ;;
                w)
                        wipe=true
                        ;;
                o)
                        other=true
                        altLog="$OPTARG"
                        ;;
                i) 
                        indicator=true
                        ;;
                *)
                        gitOptions
                        ;;

        esac
done

#if clone flag is used
if [[ $clone ]]; then
echo -e "\n${bold}CLONE BATCHGIT\n==============${normal}\n"
        #enter if clone flag used
        #checks that repos match paths in number
        checkrepodirmatch
        let i=0
        for dir in ${localRepo[@]}; do
                #if directory not present then it makes it
                if [[ ! -d ${localRepo[$i]} ]]; then
                        if [ "${localRepo[$i]}" != '/home/$USER/' ]; then
                                echo "Making the directory ${localRepo[$i]}"
                                eval mkdir -p "${localRepo[$i]}"
                        fi
                fi
                #moves to the dir in question
                eval cd ${localRepo[$i]}
                #tells you where you are
                echo "this dir is ${bold}$(pwd)${normal}"
                #tells you what it should match
                echo "which should match ${localRepo[$i]}"
                #tells you what its going to put there
                echo "for cloning ${bold}${clones[$i]}${normal}"
                confirmClone
                let i+=1
                echo -e "\n"
        done 
fi

if [[ ! -f $log ]]; then
	findgitrepos
fi

# tput clear
checkbatchgit
logLocation


#multiple choice for no option or post config
if [[ $# == 0 ]]; then
echo -e "\n${bold}OPTIONS\n=======${normal}"
        gitOptions
fi

if [[ $ask ]]; then
        echo "HERE"
        askLoop
fi

#tests for config file, or runs if forced to redo config
if [[ $gfind ]]; then
echo -e "\n${bold}FINDING GIT REPOS\n=================${normal}\n"
        findgitrepos
fi

if [[ $greset ]]; then
echo -e "\n${bold}GIT RESET\n=========${normal}\n"
for dir in "${paths[@]}"; do
        let i+=1
        cd $dir
        gitReset
done
fi

#Check to ensure all local directories still exist
for dir in "${paths[@]}"; do
        #checks that the directory still exists before running anything
        if [[ ! -d $dir ]]; then
                echo -e "The $dir directory doesn't exist anymore and has been removed from the config file"
                sed -e "s|$dir||g" -i  $log
        fi
done

#arguement to backup
if [[ $backup ]]; then
echo -e "\n${bold}BACKUP BATCHGIT\n===============${normal}\n"
        #if the flag for backup mode has been used
        #check if the takeaway directory doesn't already exists
        if [[ ! -d ~/batchgit-takeaway ]]; then
                echo "Building a takeaway box for you at ${bold}~/batchgit-takeaway${normal}"
                echo "This will be where the files for bootstrapping will live"
                mkdir ~/batchgit-takeaway
                echo "It might be an idea for you to put a copy of batchgit-takeaway in the folder too"
                echo ""
        fi
        #if the following files already exist, back them up and make new ones.
        if [[ -f ~/batchgit-takeaway/bootstraprepo ]]; then
                echo -e "Bootstraprepo file already exists, making a back up at ~/batchgit-takeaway/bootstraprepo.bak\n"
                mv ~/batchgit-takeaway/bootstraprepo ~/batchgit-takeaway/bootstraprepo.bak
        fi
        if [[ -f ~/batchgit-takeaway/bootstrapdir ]]; then
                echo -e "Bootstrapdir file already exists, making a back up at ~/batchgit-takeaway/bootstrapdir.bak\n"
                mv ~/batchgit-takeaway/bootstrapdir ~/batchgit-takeaway/bootstrapdir.bak
        fi
        #check if a batchgitrepo exists, if not then tell them to run it. Or let the function run
        if [[ ! -f $log ]]; then
                echo "You don't have a $log file."
                echo "This can be created by running batchgit -find"
                echo "or the following"
                findgitrepos
        fi
        #backup mode begins
        # echo -e "\n${bold}BACKUP MODE\n===========${normal}\n"
        MODE="BACKUP MADE"
        modeEcho
        #cycle through files in the batchgitrc and ask if they should be added to the clone
        while read locdir; do
                echo -e "Local repository is $locdir"
                cd $locdir
                remotes=$(git remote -v | grep "fetch")
                remotesClean=$(echo $remotes | sed -e 's/origin//' | sed -e 's/ (fetch)//')
                remotePresent=1
                remoteTotal=$(echo $remotes | grep -c "fetch")
                #Count how many remotes exist, actually I am not sure of this works
                if [[ $remoteTotal -gt "1" ]]; then
                        echo "The are $remoteTotal remotes"
                        while [[ $remotePresent -le $remoteTotal ]]; do
                                let remotePresent+=1
                                echo $remotes
                                echo $($remotes | grep -m$remotePresent)
                                echo "Sorry, I haven't got round to making multiple remotes work."
                                echo "Please let me know what the output from having multiple remotes looks like and I'll try and make it work"
                        done
                else
                        #echo the remote
                        echo "There is only one remote branch"
                        echo -e "Which is:${bold}$remotesClean${normal}"
                fi
                #run through the multiple choice for bootstrapping
                bootstrapchoice
                echo -e "\n"
        done < $log
        #changes all of the first line to user, this assumes that all directories live in ~
        #something == "y to optimise if anyone beside me actually uses it.
        sed -e 's|^|/home/$USER/|g' -i ~/batchgit-takeaway/bootstrapdir
        #function to check backup list has cycle through properly
        checkrepodirmatch
fi


#add new repo to config file
# if [[ $add ]]; then
if [[ $add ]] || [[ $oadd ]]; then
        if [[ $oadd == "true" ]]; then
                addDir=$oaddDir
                echo $addDir
        fi
        checkbatchgit
        # echo -e "\n${bold}ADD REPOS TO BATCHGIT\n=====================${normal}\n"
        MODE="ADD REPOS TO BATCHGIT"
        modeEcho
        #add individual dir/repo mode
        #tidy these up so only one write
        gitAdd
fi

if [[ $gaddrec ]]; then
findrecurgit=( $(find $addrecDir -type d -name .git | xargs -n 1 dirname) )
for dir in "${findrecurgit[@]}"; do
        repdir=$(echo $dir | cut -c 2-)
        PWD=$(pwd)
        pwdrepdir=$PWD$repdir
        echo -e "$pwdrepdir"
        read -p "Would you like to watch this repository? (y/n): " -n 1 -r
        if [[ $REPLY =~ ^[Yy]$ ]]; then
                echo -e "\n$pwdrepdir" >> $log
        fi
        echo -e "\n"
        sort -u -o $log $log
done

fi

if [[ $grm ]]; then
# echo -e "\n${bold}REMOVE REPOS FROM BATCHGIT\n==========================${normal}\n"
        MODE="REMOVE REPOS FROM BATCHGIT"        
        modeEcho
        #add individual dir/repo mode
        if [[ ! -z $rmDir ]]; then 
                #checks rc exists, think this is / should be a function
                if [[ ! -f $log ]]; then
                        echo "$log file does not exist \n"
                        findgitrepos
                fi
                if [[ $rmDir == "./" ]]; then
                        echo -e "removing $(pwd) from $log\n"
                        rmDir=$(pwd)
                        sed -i "s:$rmDir::g" $log 
                elif [[ $rmDir =~ "home" ]]; then
                        echo -e "removing $rmDir from $log\n"
                        sed -i "s:$rmDir::g" $log 
                else
                        if [[ $rmDir != "*/*" ]]; then
                                # PWD=$(pwd)
                                #adds based on pwd plus arguement
                                # pwdreprmdir=$PWD"/"$rmDir
                                # echo -e "removing $pwdreprmdir from $log\n"
                                echo -e "removing $rmDir from $log\n"
                                sed -i "s:$rmDir::g" $log 
                        else
                                echo -e "Removed $rmDir from the $log file"
                                sed -i "s:$pwdreprmDir::g" $log 
                        fi
                fi
                #removes any duplicates
                sort -u -o $log $log
        else
                #error if dir not added
                echo "you need to add the directory after the flag!"
        fi
fi

#deletes blank lines from the batchgitrc file
#could potentially be moved into the loop above
sed -e '/^$/d' -i $log 

#git status
if [[ $gstatus ]]; then
# echo -e "\n${bold}GIT STATUS\n==========${normal}\n"
        MODE="GIT STATUS"
        modeEcho
        for dir in "${paths[@]}"; do
                #moves into the directory listed
                cd $dir
                gitStatus 
        done
fi

#git pull
if [[ $gpull ]]; then
        MODE="GIT PULL"
        modeEcho
        progNum=0
        for dir in "${paths[@]}"; do
                #moves into the directory listed
                j=$(($progNum+1))
                progNum=$j
                cd $dir
                pwdEcho
                progressLoop $progNum $totalNum
                gitPull
                tput cup 8 0
        done
fi

#git push
if [[ $gpush ]] || [[ $gpullpush ]]; then
        progNum=0
        if [[ $gpullpush ]] && [[ -z $gpush ]]; then
                MODE="GIT PULL & PUSH"
                modeEcho
        elif [[ $gpush ]] && [[ -z $gpullpush ]]; then
                MODE="GIT PUSH"
                modeEcho
        fi
        for dir in "${paths[@]}"; do
                j=$(($progNum+1))
                progNum=$j
                cd $dir
                pwdEcho
                progressLoop $progNum $totalNum
                gitPush $1
                tput cup 8 0
        done
fi

#commit flag, complicated due to flag and commit message catching
if [[ $gcommit ]]; then
        for dir in "${paths[@]}"; do
                cd $dir
                gitCommit
        done
fi

#catch wipe flag
if [[ $wipe ]]; then
        # echo -e "\n${bold}REMOVE REPOS\n============${normal}\n"
        MODE="REMOVE REPOS"
        modeEcho
        let i=1
        for dir in "${paths[@]}"; do
                let i+=1
                cd $dir
                wipeRepos
        done
fi

#start indicator 
if [[ $indicator ]]; then
        DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
        python $DIR/indicator/indicator.py &
fi
